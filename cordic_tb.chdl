_ = require "lodash"
cordic = importDesign('./cordic.chdl')

cordic_cfg={
  data_width : 32   
  angle_width : 32
  max_iteration_num : 16
  stage_num : 4
  di_mode : "sin"
  Q : 16
}
verify_cfg={
  check_res : 0
}

class cordic_tb extends Module
  cordic_u0 : new cordic(cordic_cfg.data_width, cordic_cfg.angle_width, cordic_cfg.max_iteration_num, cordic_cfg.di_mode, cordic_cfg.Q, cordic_cfg.stage_num)
  constructor: ->
    super()
    
    Mixin importLib('verilog_helpers.chdl') 
    
    @data_width = cordic_cfg.data_width
    @angle_width = cordic_cfg.angle_width
    @max_iteration_num = cordic_cfg.max_iteration_num
    
    @check = verify_cfg.check_res
    @period = 10
    @Q = cordic_cfg.Q
    
    @di_mode = cordic_cfg.di_mode
    @stage_num = cordic_cfg.stage_num
    
    @table_s = []
    tan = 1.0
    K = 1.0
    for i in _.range(@max_iteration_num)
      artan = Math.atan(tan)*180/Math.PI
      K = K * Math.cos(artan*Math.PI/180)
      tan = tan / 2
      @table_s.push(Math.ceil(artan*(2**@Q))) 
    @Kn_t = Math.ceil(K*(2**@Q))
    console.log(@Kn_t)
    console.log(@table_s)
    
    @table_sh = []
    tanh = 0.5
    K = 1.0
    for i in _.range(@max_iteration_num)
      artanh = Math.atanh(tanh)
      K = K * Math.cosh(artanh)
      tanh = tanh / 2
      @table_sh.push(Math.floor(artanh*(2**@Q))) 
    @Kn_h = Math.floor(K*(2**@Q))
    console.log(K)
    console.log(@Kn_h)
    console.log(@table_sh)
    
    create_data_in = (mode) =>
      if mode == "sin" or mode == "sinh"
        {
          angle  : vreg(@angle_width)
        }
      else if mode == "atan" or mode == "atanh"
        {
          y_0    : vreg(@data_width)
        }
      else
        {
          x_0   : vreg(@data_width)
          angle : vreg(@angle_width)
          y_0   : vreg(@data_width)
        }
    Reg(
      data_in: create_data_in(@di_mode)
      ctrl:
        valid   : vreg()
      cfg:
        delta         : vreg(@data_width)
        di_mode       : vreg(8)
        iteration_num : vreg(8)
    )
    Reg(
      clk : vreg()  
      rstn : vreg().init(1)
    )
    

    Channel(
      #ch : @mold(@cordic_u0)
      data_in_ch  : channel()
      data_out_ch : channel()
      ctrl_ch     : channel()
      cfg_ch      : channel()
    )
    
    @cordic_u0.bind(
      data_in  : @data_in_ch
      data_out : @data_out_ch
      ctrl     : @ctrl_ch
      cfg      : @cfg_ch
    )
    #console.log(@ch) 
    @setDefaultClock('clk')
    @setDefaultReset('rstn') 
    
  cordic_soft:(x_0, y_0, angle_0, delta, mode, table, iter_num, max_iter_num, stage_num) ->
    res = {}
    x = x_0
    y = y_0
    angle = angle_0
    
    
    #console.log(table)
    e = 0
    if mode == 4
      while y <= (0.5*(2**@Q)) or y > ((2**@Q)) 
        if y <= (0.5*(2**@Q)) 
          y = y << 1
          e--
        else
          y = y >> 1
          e++
          
      x = y + (2**@Q)
      y = y - (2**@Q)
    
    
    if mode == 1 or mode == 2
      m = 0
    else
      m = 1
    
    for j in _.range(Math.floor(max_iter_num/stage_num)) 
      for i in _.range(stage_num)
        if mode == 1 or mode == 3
          cond = angle
        else if mode == 4
          cond = -(x*y) 
        else
          cond = -(x*y)
          
        if cond >= 0 
          d = 1
        else
          d = -1
          
        if mode == 4 or mode == 3
          x_o = x + d * (y >> (i+j*stage_num+m))
        else
          x_o = x - d * (y >> (i+j*stage_num+m))
        y_o = y + d * (x >> (i+j*stage_num+m))
        
        angle_o = angle - d * table[i+j*stage_num]
        
        
        
        x = x_o
        y = y_o
        angle = angle_o
        
        
         
              
        if mode == 1 or mode == 3
          err  = angle
        else 
          err  = y
        
        if err < 0 
          err = -err
          
        console.log("run   " + i)
        console.log("iter  " + (i+j*stage_num))
        console.log("x     " + x)
        console.log("y     " + y)
        console.log("angle " + angle)
        console.log("d     " + d)
        console.log("table " + table[i+j*stage_num])
        console.log("delta " + delta)
        console.log("err : " + err) 
        console.log("========cordic_tb===")
        
      res["x"] = x
      res["y"] = y
      res["angle"] = angle
      res["ln"] = angle*2 + e*Math.floor(Math.log(2)*(2**@Q))
      console.log(res)
      
    return res
        
  
  cordic_sim:(seq, data_in, ctrl, ctrl_ch, cfg) ->
    ret = {}
    delta = Math.ceil((0.001)*(2**@Q))
    mode = 1 #Math.floor(Math.random()*100)%4 + 1
    if @di_mode == "sin"
      x_in  = @Kn_t
      angle = Math.floor(Math.random()*1000)%360
      y_in  = 0
      mode_in = 1
    else if @di_mode == "atan"
      x_in = (1**@Q)
      y_ex = Math.floor(Math.random()*100)
      y_in = y_ex * (2**@Q)
      angle = 0
      mode_in = 2
    else if @di_mode == "sinh"
      x_in  = @Kn_h
      angle = Math.floor(Math.random()*1000)%20
      console.log("angle " + angle)
      y_in  = 0
      mode_in = 3
    else if @di_mode == "atanh" # ln
      x_in = 1*(2**@Q)
      y_ex = 0.6
      y_in = Math.floor((y_ex)*(2**@Q))
      angle = 0
      mode_in = 4
    else
      mode_in = mode
      if mode == 1 
        x_in =  @Kn_t
        y_in =  0
        angle = Math.floor(Math.random()*1000)%360
      else if mode == 3
        x_in =  @Kn_h
        y_in =  0
        angle = Math.floor(Math.random()*1000)%360
      else 
        x_in =  2**@Q
        if mode == 4
          y_ex = Math.floor(Math.random()*10)%4 + 6
          y_ex = y_ex / 10
        y_in = Math.floor((y_ex)*(2**@Q))
        angle = 0
        
      
    iter_num = Math.floor(Math.random()*100)%@max_iteration_num + 1
    #input data 
    console.log("x_in  " + x_in)
    console.log("y_in  " + y_in)
    console.log("angle " + angle)
    
    #real res 
    if mode_in == 1
      console.log("cos: " + Math.cos(angle * Math.PI / 180)) 
      real_cos = Math.cos(angle * Math.PI / 180) 
      console.log("sin:"  + Math.sin(angle * Math.PI / 180)) 
      real_sin = Math.sin(angle * Math.PI / 180)
    else if mode_in == 2
      console.log("atan: " + Math.atan(y_ex))
    else if mode_in == 3
      console.log("cosh: " + Math.cosh(angle))
      console.log("sinh: " + Math.sinh(angle))
      console.log("e: " + Math.exp(angle))
    else if mode_in == 4
      console.log("atanh: " + Math.atanh(y_in/(2**@Q)))
      console.log("ln: " + Math.log(y_ex))
    #console.log("tan_1_y: ")
    if mode_in == 1
      if angle >= 0 and angle < 90
        float_angle = (angle)*(2**@Q)
      else if angle >= 90 and angle < 180
        float_angle = (angle-90)*(2**@Q)
      else if angle >= 180 and angle < 270
        float_angle = (angle-180)*(2**@Q)
      else
        float_angle = (angle-270)*(2**@Q)
    else
      float_angle = angle * (2**@Q)
      
    
    #run soft calc 
    if mode_in == 1 or mode_in == 2
      table_use = @table_s
    else
      table_use = @table_sh
    console.log(table_use)
    ret = @cordic_soft(x_in, y_in, float_angle, delta, mode_in, table_use, iter_num, @max_iteration_num,@stage_num) 
   
     
    console.log("cordic res========>")
    console.log(ret)
    #cordic res 
    if mode_in == 1
      if angle >= 0 and angle < 90
        console.log(ret.x)
        console.log(ret.y)
        console.log("cos:"  + ret.x / (2**@Q))
        console.log("sin:"  + ret.y / (2**@Q))
        ret["cos"] =  ret.x
        ret["sin"] =  ret.y
      else if angle >=90 and angle < 180
        console.log((-ret.y + 1))
        console.log(ret.x)
        console.log("cos:"  + (1-ret.y) / (2**@Q))
        console.log("sin:"  + ret.x / (2**@Q))
        ret["cos"] =  (-ret.y+1)
        ret["sin"] =  ret.x
      else if angle >=180 and angle < 270
        console.log((-ret.x + 1))
        console.log((-ret.y + 1))
        console.log("cos:"  + (1-ret.x) / (2**@Q))
        console.log("sin:"  + (1-ret.y) / (2**@Q))
        ret["cos"] =  (-ret.x+1)
        ret["sin"] =  (-ret.y+1)
      else
        console.log((ret.y))
        console.log((-ret.x + 1))
        console.log("cos:"  + (ret.y) / (2**@Q))
        console.log("sin:"  + (1-ret.x) / (2**@Q))
        ret["cos"] = ret.y
        ret["sin"] = (-ret.x+1)
    else
      console.log("x: " + (ret.x)/(2**@Q))
      console.log("y: " + (ret.y)/(2**@Q))
      console.log("angle: " + (ret.angle)/(2**@Q))
      console.log("e: " + (ret.x+ret.y)/(2**@Q))
      console.log("ln: " + (ret.ln)/(2**@Q))
    
    
    #set reg 
    seq.delay(0) =>
      assign ctrl.valid = 1
      if @di_mode == "all"
        assign data_in.x_0 = x_in
      if @di_mode == "atan" or @di_mode == "atanh" or @di_mode == "all"
        assign data_in.y_0 = y_in
      if @di_mode == "sin" or @di_mode == "sinh" or @di_mode == "all"
        assign data_in.angle = angle
      
      assign cfg.di_mode = mode_in
      assign cfg.delta = delta
    seq.polling(@clk, $ ctrl_ch.grant) =>
      assign ctrl.valid = 0
    return ret
  
  check_res:(seq, data_out, res, ctrl) ->
    seq.polling(@clk, $ ctrl.ready) =>
      @assert_eq(data_out.cos, res.cos, "cos")
      @assert_eq(data_out.sin, res.sin, "sin")
    
  build: ->
    send_num = 1 
    end_signal = vreg(1, "end_signal") 
    end_cnt = vreg(8, "end_cnt")
    @create_clock(@clk,@period) 
    @create_resetn(@rstn)                   # there is a 100 unit time delay
    a = vreg(32, "a")
    b = vreg(32, "b")
    c = vreg(33, "c")
    
    
    #vreg_signal = $stubPort(@ch)
    #console.log(vreg_signal)
    
    if @di_mode ==  "all"
      assign @data_in_ch.x_0     = @data_in.x_0
    
    if @di_mode == "all" or @di_mode == "atan" or @di_mode == "atanh" 
      assign @data_in_ch.y_0     = @data_in.y_0
    if @di_mode == "all" or @di_mode == "sin" or @di_mode == "sinh"
      assign @data_in_ch.angle   = @data_in.angle
    
    
    assign @ctrl_ch.valid = @ctrl.valid
    
    assign @cfg_ch.delta   = @cfg.delta
    assign @cfg_ch.di_mode = @cfg.di_mode
    #assign @cfg_ch.iteration_num = @cfg.iteration_num
    
    soft_res = {} 
    res_list = []
    initial
      seq = $sequence("test")
      seq.delay(215) =>
        assign a = 1000
        assign b = -4
      seq.delay(10) =>
        assign c = a.sign() - b.sign()
      seq.end()
 
    initial
      seq = $sequence("simulation")
      seq.delay(215) =>
        @display("start simulation")
      seq.delay(10) =>
        for cnt in _.range(send_num)
          soft_res = @cordic_sim(seq, @data_in, @ctrl, @ctrl_ch, @cfg)
          res_list.push(soft_res)
        @display("set end_signal")
      seq.delay(10) =>
        console.log(res_list)
        @display("end simulation")
      seq.end()
    
    if @check == 1  
      initial
        seq = $sequence("check res")
        seq.delay(215) =>
          for cnt in _.range(send_num)
            @check_res(seq, @data_out_ch, res_list[cnt], @ctrl_ch)
        seq.end()
        
    
      
    initial
      seq = $sequence("set sim finish")
      seq.delay(1000) =>
        @display("get end signal")
      seq.delay(20) =>
        if @check == 1
          @assert_report()
        @sim_finish() 
      seq.end()
       

module.exports=cordic_tb